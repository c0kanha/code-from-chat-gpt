-- Create the nodes table
CREATE TABLE nodes (
    id INT PRIMARY KEY,
    name VARCHAR(100)
);

-- Create the edges table
CREATE TABLE edges (
    source_id INT,
    target_id INT,
    FOREIGN KEY (source_id) REFERENCES nodes(id),
    FOREIGN KEY (target_id) REFERENCES nodes(id)
);

-- Insert nodes data
INSERT INTO nodes (id, name) VALUES
    (1, 'Root'),
    (2, 'Node 1'),
    (3, 'Node 1.1'),
    (4, 'Node 1.2'),
    (5, 'Node 1.2.1'),
    (6, 'Node 1.2.2'),
    (7, 'Node 2');

-- Insert edges data
INSERT INTO edges (source_id, target_id) VALUES
    (1, 2),
    (2, 3),
    (2, 4),
    (4, 5),
    (4, 6),
    (1, 7);
   
WITH RECURSIVE tree AS (
    SELECT n.id, n.name, ARRAY[n.id] AS path
    FROM nodes n
    WHERE n.id = 1

    UNION ALL

    SELECT n.id, n.name, t.path || n.id
    FROM nodes n
    JOIN edges e ON e.source_id = t.id
    JOIN tree t ON t.id = e.target_id
)
SELECT t.name, t.path
FROM tree t
ORDER BY t.path;


CREATE TABLE Nodes (
  node_id INT PRIMARY KEY,
  node_name VARCHAR(50)
);

CREATE TABLE Edges (
  edge_id INT PRIMARY KEY,
  source_node_id INT,
  target_node_id INT,
  FOREIGN KEY (source_node_id) REFERENCES Nodes(node_id),
  FOREIGN KEY (target_node_id) REFERENCES Nodes(node_id)
);

WITH RECURSIVE ConnectedNodes AS (
  SELECT source_node_id, target_node_id
  FROM Edges
  WHERE source_node_id = {given_node_id}
  UNION ALL
  SELECT e.source_node_id, e.target_node_id
  FROM Edges e
  INNER JOIN ConnectedNodes cn ON e.source_node_id = cn.target_node_id
)
SELECT * FROM ConnectedNodes;

SELECT n2.*
FROM Nodes n1
JOIN Edges e ON e.source_node_id = n1.node_id
JOIN Nodes n2 ON e.target_node_id = n2.node_id
WHERE n1.node_id = {given_node_id};

CREATE TABLE Edges (
  edge_id INT PRIMARY KEY,
  source_node_id INT,
  target_node_id INT,
  source_indent INT,
  target_indent INT,
  FOREIGN KEY (source_node_id) REFERENCES Nodes(node_id),
  FOREIGN KEY (target_node_id) REFERENCES Nodes(node_id)
);
